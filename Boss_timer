import datetime
import time
import threading
import sys
import re
import requests

CSS_PATH = "bdo_boss_schedule.css" # Ton fichier CSS/tableau
DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/xxxx/yyyy" # Mets le vrai lien

def parse_css_schedule(path):
    schedule = dict()
    day = None
    with open(path, 'r', encoding='utf-8') as f:
        for line in f:
            match_day = re.match(r'-{3} (\w+) -{3}', line)
            if match_day:
                day = match_day.group(1).upper()
                schedule[day] = []
            match_boss = re.match(r'(\d{2}):(\d{2}) ?: (.+)', line)
            if match_boss and day:
                hour, minute, bosses = int(match_boss.group(1)), int(match_boss.group(2)), match_boss.group(3)
                for boss in map(str.strip, bosses.split(',')):
                    schedule[day].append({'boss': boss, 'hour': hour, 'minute': minute})
    return schedule

def send_discord_notification(boss, hour, minute):
    data = {
        "content": f":rotating_light: **10 minutes avant le spawn de `{boss}` !** (à {hour:02d}:{minute:02d})"
    }
    try:
        requests.post(DISCORD_WEBHOOK_URL, json=data)
    except Exception as e:
        print("Erreur Discord:", e)

def time_until(hour, minute):
    now = datetime.datetime.now()
    target = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
    if target < now:
        target += datetime.timedelta(days=1)
    return (target - now).total_seconds()

def boss_notifier(schedule):
    while True:
        now = datetime.datetime.now()
        jours = ['LUNDI','MARDI','MERCREDI','JEUDI','VENDREDI','SAMEDI','DIMANCHE']
        jour_fr = jours[now.weekday()]
        if jour_fr in schedule:
            for event in schedule[jour_fr]:
                seconds_left = time_until(event['hour'], event['minute']) - 600
                if 0 < seconds_left < 60:
                    threading.Thread(target=send_discord_notification, args=(
                        event['boss'], event['hour'], event['minute']
                    )).start()
        time.sleep(60)

if __name__ == "__main__":
    print("Chargement du planning des boss depuis le CSS...")
    schedule = parse_css_schedule(CSS_PATH)
    print("Notifier Discord lancé. CTRL+C pour arrêter.")
    try:
        boss_notifier(schedule)
    except KeyboardInterrupt:
        sys.exit(0)
